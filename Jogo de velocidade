ArrayList<Segment> snake; // Lista de segmentos da cobra
PVector food; // Posição da comida
int segmentSize = 20; // Tamanho de cada segmento
int foodCount = 0; // Quantidade de comida coletada
int startTime; // Tempo inicial do jogo
int gameDuration = 30; // Duração do jogo em segundos
boolean gameOver = false; // Estado do jogo

void setup() {
  size(800, 800);
  initGame();
}

void draw() {
  if (!gameOver) {
    background(20, 30, 50); // Fundo escuro
    updateSnake();
    checkFood();
    drawFood();
    drawSnake();
    displayTimeAndFood();
    
    // Verifica se o tempo acabou
    if (millis() - startTime > gameDuration * 1000) {
      gameOver = true;
    }
  } else {
    displayGameOver();
  }
}

void initGame() {
  // Inicializa a cobra com 5 segmentos
  snake = new ArrayList<Segment>();
  for (int i = 0; i < 5; i++) {
    snake.add(new Segment(width / 2, height / 2 + i * segmentSize));
  }
  foodCount = 0;
  spawnFood();
  startTime = millis(); // Marca o início do jogo
  gameOver = false;
}

void updateSnake() {
  // A cabeça segue o mouse
  PVector newHead = new PVector(mouseX, mouseY);
  snake.add(0, new Segment(newHead.x, newHead.y)); // Adiciona novo segmento na frente
  
  // Remove o último segmento para manter o tamanho, exceto quando crescer
  if (snake.size() > 5 + foodCount) {
    snake.remove(snake.size() - 1);
  }
}

void drawSnake() {
  for (int i = 0; i < snake.size(); i++) {
    Segment s = snake.get(i);
    
    // Gradiente de cor fria para o corpo da cobra
    float t = map(i, 0, snake.size(), 0, 1);
    fill(lerpColor(color(50, 50, 200), color(50, 200, 200), t)); // Tons de azul e verde
    noStroke();
    
    // Desenha cada segmento como um círculo
    ellipse(s.x, s.y, segmentSize, segmentSize);
  }
}

void spawnFood() {
  food = new PVector(
    floor(random(width / segmentSize)) * segmentSize, 
    floor(random(height / segmentSize)) * segmentSize
  );
}

void drawFood() {
  fill(100, 200, 255); // Azul claro para a comida
  noStroke();
  ellipse(food.x + segmentSize / 2, food.y + segmentSize / 2, segmentSize, segmentSize);
}

void checkFood() {
  // Verifica se a cabeça da cobra toca a comida
  PVector head = new PVector(snake.get(0).x, snake.get(0).y);
  if (dist(head.x, head.y, food.x + segmentSize / 2, food.y + segmentSize / 2) < segmentSize) {
    spawnFood(); // Gera nova comida
    foodCount++; // Incrementa o contador de alimentos
    // Aumenta a cobra ao adicionar um novo segmento
    snake.add(new Segment(snake.get(snake.size() - 1).x, snake.get(snake.size() - 1).y));
  }
}

void displayTimeAndFood() {
  // Calcula o tempo restante
  int elapsedTime = (millis() - startTime) / 1000;
  int timeLeft = gameDuration - elapsedTime;

  // Exibe o tempo restante e o contador de alimentos
  fill(255);
  textSize(20);
  textAlign(LEFT, TOP);
  text("Tempo: " + timeLeft + "s", 10, 10);
  text("Alimentos: " + foodCount, 10, 40);
}

void displayGameOver() {
  background(20, 30, 50);
  fill(255, 0, 0);
  textSize(40);
  textAlign(CENTER, CENTER);
  text("GAME OVER", width / 2, height / 2 - 20);
  textSize(20);
  text("Alimentos coletados: " + foodCount, width / 2, height / 2 + 20);
  text("Pressione R para reiniciar", width / 2, height / 2 + 60);
}

void keyPressed() {
  if (key == 'r' || key == 'R') {
    initGame(); // Reinicia o jogo ao pressionar "R"
  }
}

// Classe para representar segmentos da cobra
class Segment {
  float x, y; // Posição do segmento
  Segment(float x, float y) {
    this.x = x;
    this.y = y;
  }
}
